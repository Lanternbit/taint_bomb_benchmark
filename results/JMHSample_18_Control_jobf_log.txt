STDOUT:
# JMH version: 1.35
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1+8-16
# VM invoker: C:\Users\kisia\Desktop\record\openjdk-22.0.1_windows-x64_bin\jdk-22.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads (1 group; 1x "ping", 1x "pong" in each group), will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHSample_18_Control.pingpong

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 5
# Warmup Iteration   1: 41580308.513 ops/s
Iteration   1: 40229068.902 ops/s
                 ping: 20114537.768 ops/s
                 pong: 20114531.134 ops/s


# Run progress: 20.00% complete, ETA 00:01:21
# Fork: 2 of 5
# Warmup Iteration   1: 34258049.858 ops/s
Iteration   1: 34587335.521 ops/s
                 ping: 17293671.719 ops/s
                 pong: 17293663.803 ops/s


# Run progress: 40.00% complete, ETA 00:01:00
# Fork: 3 of 5
# Warmup Iteration   1: 42718270.173 ops/s
Iteration   1: 40861544.634 ops/s
                 ping: 20430765.275 ops/s
                 pong: 20430779.359 ops/s


# Run progress: 60.00% complete, ETA 00:00:40
# Fork: 4 of 5
# Warmup Iteration   1: 30782507.448 ops/s
Iteration   1: 29221000.846 ops/s
                 ping: 14610503.898 ops/s
                 pong: 14610496.948 ops/s


# Run progress: 80.00% complete, ETA 00:00:20
# Fork: 5 of 5
# Warmup Iteration   1: 35058582.334 ops/s
Iteration   1: 33022527.929 ops/s
                 ping: 16511267.957 ops/s
                 pong: 16511259.972 ops/s



Result "org.sample.JMHSample_18_Control.pingpong":
  35584295.566 ��(99.9%) 19008240.653 ops/s [Average]
  (min, avg, max) = (29221000.846, 35584295.566, 40861544.634), stdev = 4936379.734
  CI (99.9%): [16576054.913, 54592536.220] (assumes normal distribution)

Secondary result "org.sample.JMHSample_18_Control.pingpong:ping":
  17792149.323 ��(99.9%) 9504109.007 ops/s [Average]
  (min, avg, max) = (14610503.898, 17792149.323, 20430765.275), stdev = 2468186.928
  CI (99.9%): [8288040.316, 27296258.330] (assumes normal distribution)

Secondary result "org.sample.JMHSample_18_Control.pingpong:pong":
  17792146.243 ��(99.9%) 9504131.646 ops/s [Average]
  (min, avg, max) = (14610496.948, 17792146.243, 20430779.359), stdev = 2468192.807
  CI (99.9%): [8288014.597, 27296277.889] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                            Mode  Cnt         Score          Error  Units
JMHSample_18_Control.pingpong       thrpt    5  35584295.566 �� 19008240.653  ops/s
JMHSample_18_Control.pingpong:ping  thrpt    5  17792149.323 ��  9504109.007  ops/s
JMHSample_18_Control.pingpong:pong  thrpt    5  17792146.243 ��  9504131.646  ops/s

Benchmark result is saved to results\JMHSample_18_Control_jobf.csv


STDERR:
