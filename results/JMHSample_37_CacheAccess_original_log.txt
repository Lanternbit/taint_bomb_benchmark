STDOUT:
# JMH version: 1.35
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1+8-16
# VM invoker: C:\Users\kisia\Desktop\record\openjdk-22.0.1_windows-x64_bin\jdk-22.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.JMHSample_37_CacheAccess.colFirst

# Run progress: 0.00% complete, ETA 00:00:20
# Fork: 1 of 5
# Warmup Iteration   1: 6.943 ns/op
Iteration   1: 7.759 ns/op

# Run progress: 10.00% complete, ETA 00:00:24
# Fork: 2 of 5
# Warmup Iteration   1: 6.971 ns/op
Iteration   1: 7.770 ns/op

# Run progress: 20.00% complete, ETA 00:00:21
# Fork: 3 of 5
# Warmup Iteration   1: 6.850 ns/op
Iteration   1: 8.139 ns/op

# Run progress: 30.00% complete, ETA 00:00:19
# Fork: 4 of 5
# Warmup Iteration   1: 7.078 ns/op
Iteration   1: 7.771 ns/op

# Run progress: 40.00% complete, ETA 00:00:16
# Fork: 5 of 5
# Warmup Iteration   1: 6.869 ns/op
Iteration   1: 7.811 ns/op


Result "org.sample.JMHSample_37_CacheAccess.colFirst":
  7.850 ��(99.9%) 0.627 ns/op [Average]
  (min, avg, max) = (7.759, 7.850, 8.139), stdev = 0.163
  CI (99.9%): [7.223, 8.477] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1+8-16
# VM invoker: C:\Users\kisia\Desktop\record\openjdk-22.0.1_windows-x64_bin\jdk-22.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.JMHSample_37_CacheAccess.rowFirst

# Run progress: 50.00% complete, ETA 00:00:13
# Fork: 1 of 5
# Warmup Iteration   1: 0.350 ns/op
Iteration   1: 0.315 ns/op

# Run progress: 60.00% complete, ETA 00:00:10
# Fork: 2 of 5
# Warmup Iteration   1: 0.386 ns/op
Iteration   1: 0.355 ns/op

# Run progress: 70.00% complete, ETA 00:00:08
# Fork: 3 of 5
# Warmup Iteration   1: 0.373 ns/op
Iteration   1: 0.317 ns/op

# Run progress: 80.00% complete, ETA 00:00:05
# Fork: 4 of 5
# Warmup Iteration   1: 0.345 ns/op
Iteration   1: 0.326 ns/op

# Run progress: 90.00% complete, ETA 00:00:02
# Fork: 5 of 5
# Warmup Iteration   1: 0.344 ns/op
Iteration   1: 0.317 ns/op


Result "org.sample.JMHSample_37_CacheAccess.rowFirst":
  0.326 ��(99.9%) 0.064 ns/op [Average]
  (min, avg, max) = (0.315, 0.326, 0.355), stdev = 0.017
  CI (99.9%): [0.262, 0.391] (assumes normal distribution)


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                          Mode  Cnt  Score   Error  Units
JMHSample_37_CacheAccess.colFirst  avgt    5  7.850 �� 0.627  ns/op
JMHSample_37_CacheAccess.rowFirst  avgt    5  0.326 �� 0.064  ns/op

Benchmark result is saved to results\JMHSample_37_CacheAccess_original.csv


STDERR:
