STDOUT:
# JMH version: 1.35
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1+8-16
# VM invoker: C:\Users\kisia\Desktop\record\openjdk-22.0.1_windows-x64_bin\jdk-22.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads (1 group; 1x "ping", 1x "pong" in each group), will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHSample_18_Control.pingpong

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 5
# Warmup Iteration   1: 27087494.132 ops/s
Iteration   1: 29685884.549 ops/s
                 ping: 14842947.118 ops/s
                 pong: 14842937.432 ops/s


# Run progress: 20.00% complete, ETA 00:01:21
# Fork: 2 of 5
# Warmup Iteration   1: 29929031.280 ops/s
Iteration   1: 29932808.333 ops/s
                 ping: 14966399.580 ops/s
                 pong: 14966408.754 ops/s


# Run progress: 40.00% complete, ETA 00:01:01
# Fork: 3 of 5
# Warmup Iteration   1: 29464360.479 ops/s
Iteration   1: 28906870.340 ops/s
                 ping: 14453432.331 ops/s
                 pong: 14453438.009 ops/s


# Run progress: 60.00% complete, ETA 00:00:40
# Fork: 4 of 5
# Warmup Iteration   1: 28167237.467 ops/s
Iteration   1: 28360434.689 ops/s
                 ping: 14180220.343 ops/s
                 pong: 14180214.346 ops/s


# Run progress: 80.00% complete, ETA 00:00:20
# Fork: 5 of 5
# Warmup Iteration   1: 25884787.278 ops/s
Iteration   1: 25924468.272 ops/s
                 ping: 12962178.820 ops/s
                 pong: 12962289.452 ops/s



Result "org.sample.JMHSample_18_Control.pingpong":
  28562093.237 ��(99.9%) 6166553.985 ops/s [Average]
  (min, avg, max) = (25924468.272, 28562093.237, 29932808.333), stdev = 1601434.487
  CI (99.9%): [22395539.252, 34728647.221] (assumes normal distribution)

Secondary result "org.sample.JMHSample_18_Control.pingpong:ping":
  14281035.638 ��(99.9%) 3083363.238 ops/s [Average]
  (min, avg, max) = (12962178.820, 14281035.638, 14966399.580), stdev = 800739.641
  CI (99.9%): [11197672.400, 17364398.876] (assumes normal distribution)

Secondary result "org.sample.JMHSample_18_Control.pingpong:pong":
  14281057.598 ��(99.9%) 3083190.747 ops/s [Average]
  (min, avg, max) = (12962289.452, 14281057.598, 14966408.754), stdev = 800694.846
  CI (99.9%): [11197866.851, 17364248.345] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                            Mode  Cnt         Score         Error  Units
JMHSample_18_Control.pingpong       thrpt    5  28562093.237 �� 6166553.985  ops/s
JMHSample_18_Control.pingpong:ping  thrpt    5  14281035.638 �� 3083363.238  ops/s
JMHSample_18_Control.pingpong:pong  thrpt    5  14281057.598 �� 3083190.747  ops/s

Benchmark result is saved to results\JMHSample_18_Control_original.csv


STDERR:
